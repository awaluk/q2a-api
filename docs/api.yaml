openapi: 3.0.3
info:
  title: Q2A API
  description: "The plugin adds simple API to serve some data as JSON. Here is documentation for endpoints. Currently plugin supports user authentication only via Q2A session mechanism."
  contact:
    name: GitHub issues
    url: https://github.com/awaluk/q2a-api/issues
  license:
    name: MIT
    url: https://github.com/awaluk/q2a-api/blob/master/LICENSE
  version: 0.2.0

externalDocs:
  description: GitHub repository
  url: https://github.com/awaluk/q2a-api

servers:
  - url: /api

tags:
  - name: Auth
  - name: Account
  - name: Category
  - name: Question
  - name: General

paths:
  /login:
    post:
      tags:
        - Auth
      summary: User login
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
              properties:
                login:
                  type: string
                  example: user
                  description: User email or name (when logging in via name is enabled)
                password:
                  type: string
                  example: pass
                rememberMe:
                  type: boolean
                  example: false
                  default: false
      responses:
        200:
          description: User logged
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountDto"
        400:
          description: Invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  fields:
                    type: object
                    properties:
                      password:
                        type: object
                        example: Wrong password
        403:
          description: Already logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Already logged in
  /logout:
    post:
      tags:
        - Auth
      summary: User logout
      operationId: logout
      responses:
        204:
          description: User logged out

  /account:
    get:
      tags:
        - Account
      summary: Get logged in user data
      operationId: getAccountData
      security:
        - q2aSession: []
      responses:
        200:
          description: User data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountDto"
        401:
          description: Unauthorized

  /favourites:
    get:
      tags:
        - Account
      summary: Get favourite items for logged in user
      operationId: getAccountFavourites
      security:
        - q2aSession: []
      responses:
        200:
          description: User favourite items
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FavouritesDto"
        401:
          description: Unauthorized

  /categories:
    get:
      tags:
        - Category
      summary: Get list of categories
      operationId: getCategoriesList
      responses:
        200:
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryDto"

  /questions:
    get:
      tags:
        - Question
      summary: Get list of questions
      operationId: getQuestionsList
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Number of page to show
        - in: query
          name: sort
          schema:
            type: string
            enum: [hot, votes, answers, views, date]
            default: date
          description: "Sort questions, unavailable with `tag` and `unanswered` filter."
        - in: query
          name: category
          schema:
            type: string
            example: programming/php
            default: null
          description: "Category path to filter questions by category. Only one filter can be used in same time: `category`, `tag`, `unanswered`."
        - in: query
          name: tag
          schema:
            type: string
            example: programming
            default: null
          description: "Filter by tag name. Only one filter can be used in same time: `category`, `tag`, `unanswered`."
        - in: query
          name: unanswered
          schema:
            type: boolean
            default: false
          description: "Show only questions without answers. Only one filter can be used in same time: `category`, `tag`, `unanswered`."
      responses:
        200:
          description: List of questions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/InlineQuestionDto"
                  pagination:
                    $ref: "#/components/schemas/PaginationDto"
  /questions/home:
    get:
      tags:
        - Question
      summary: Get list of questions for home list
      description: List of latest questions without pagination and with additional information about latest answer in `change` field.
      operationId: getQuestionsListForHome
      responses:
        200:
          description: List of questions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InlineQuestionDto"
  /questions/activity:
    get:
      tags:
        - Question
      summary: Get list of questions for last activity list
      description: List of latest questions without pagination and with additional information about latest action in `change` field.
      operationId: getQuestionsListForActivity
      responses:
        200:
          description: List of questions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InlineQuestionDto"

  /questions/{questionId}:
    get:
      tags:
        - Question
      parameters:
        - in: path
          name: questionId
          schema:
            type: integer
      summary: Get question details
      operationId: getQuestion
      responses:
        200:
          description: Question details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionDto"
        403:
          description: Question exists, but it's hidden and unavailable for logged user
        404:
          description: Invalid question id

  /questions/{questionId}/vote:
    post:
      tags:
        - Question
      summary: User voting on question
      operationId: vote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - vote
              properties:
                vote:
                  type: integer
                  enum: [-1, 0, 1]

  /statistics:
    get:
      tags:
        - General
      summary: Get some general statistics
      description: "4 counters: questions, answers, comments, users"
      operationId: getStatistics
      responses:
        200:
          description: Statistics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatisticsDto"

components:
  schemas:
    UserLevelDto:
      type: integer
      enum: [0, 10, 20, 50, 80, 100, 120]
      description: >
        Defines the user role/function:
          - `0` - no role, standard user
          - `10` - approved user (only when users approval is enabled in Q2A)
          - `20` - expert
          - `50` - editor
          - `80` - moderator
          - `100` - admin
          - `120` - super admin

    AccountDto:
      type: object
      required:
        - id
        - name
        - email
        - level
        - points
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: user1
          description: "Username"
        email:
          type: string
          example: "user1@example.com"
        level:
          $ref: "#/components/schemas/UserLevelDto"
        points:
          type: integer
          example: 200

    StatisticsDto:
      type: object
      required:
        - questionsCount
        - answersCount
        - commentsCount
        - usersCount
      properties:
        questionsCount:
          type: integer
          example: 5
        answersCount:
          type: integer
          example: 7
        commentsCount:
          type: integer
          example: 3
        usersCount:
          type: integer
          example: 6

    CategoryDto:
      required:
        - id
        - title
        - slug
        - path
        - description
        - subcategories
        - questionsCount
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Category 1"
        slug:
          type: string
          example: "category-1"
        path:
          type: string
          example: "category-1"
        description:
          type: string
          example: "Category description"
        position:
          type: integer
          example: 1
        questionsCount:
          type: integer
          example: 3
        subcategories:
          type: array
          items:
            $ref: "#/components/schemas/CategoryDto"

    FavouritesDto:
      type: object
      required:
        - questions
        - users
        - tags
        - categories
      properties:
        questions:
          type: array
          description: "Array of favourite questions"
          items:
            type: integer
            example: 1
            description: User id
        users:
          type: array
          description: "Array of favourite users"
          items:
            type: string
            example: user1
            description: User handle (username)
        tags:
          type: array
          description: "Array of favourite tags"
          items:
            type: string
            example: "tag-1"
            description: "Tag name"
        categories:
          type: array
          description: "Array of favourite categories"
          items:
            type: string
            example: "Category 1"
            description: "Category name"

    InlineQuestionDto:
      required:
        - id
        - title
        - slug
        - answers
        - votes
        - views
        - favourite
        - closed
        - hasBestAnswer
        - tags
        - category
        - change
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Example question
        slug:
          type: string
          example: example-question
        answers:
          type: integer
          example: 5
          description: Number of answers for question
        votes:
          type: integer
          example: 2
          description: Votes sum. For example 1 downvote and 3 upvotes gives 2.
        views:
          type: integer
          example: 100
        favourite:
          type: boolean
          example: false
          description: Is the question marked as favourite by logged user. Always `false` for not logged.
        closed:
          type: boolean
          example: false
          description: Question closed or open
        hasBestAnswer:
          type: boolean
          example: false
          description: Question has selected best answer
        tags:
          type: array
          items:
            $ref: "#/components/schemas/InlineTagDto"
        category:
          $ref: "#/components/schemas/InlineCategoryDto"
        change:
          type: object
          required:
            - type
            - date
          properties:
            type:
              type: string
              enum:
                [
                  question_created,
                  answer_created,
                  comment_created,
                  question_updated,
                  answer_updated,
                  comment_updated,
                  question_hidden,
                  answer_hidden,
                  comment_hidden,
                  question_restored,
                  answer_restored,
                  comment_restored,
                  question_closed,
                  question_reopened,
                  question_tags_updated,
                  question_category_updated,
                  answer_selected,
                  comment_moved,
                  answer_changed_to_comment,
                ]
              description: Latest action to show on list
            user:
              $ref: "#/components/schemas/InlineUserDto"
            date:
              type: string
              example: "2021-07-17T20:15:30+00:00"
              description: Date of action
            showItemId:
              type: integer
              example: 5
              description: Id of latest answer or comment for link to question details page

    QuestionDto:
      allOf:
        - $ref: "#/components/schemas/InlineQuestionDto"
        - type: object
          required:
            - isHidden
            - contentType
            - content
            - userVote
          properties:
            author:
              $ref: "#/components/schemas/InlineUserDto"
            isHidden:
              type: boolean
              default: false
            userVote:
              type: integer
              enum: [-1, 0, 1]
              description: Current user's vote
            contentType:
              type: string
              enum: ["html", "text"]
              example: "html"
            content:
              type: string
              example: "<p>Lorem ipsum dolor…</p>"
              description: Format depends on `contentType` field

    InlineTagDto:
      type: object
      required:
        - name
        - favourite
      properties:
        name:
          type: string
          example: programming
        favourite:
          type: boolean
          example: false
          description: Is the tag marked as favourite by logged user. Always `false` for not logged.

    InlineCategoryDto:
      type: object
      required:
        - id
        - title
        - path
        - favourite
      properties:
        id:
          type: integer
          example: 2
        title:
          type: string
          example: Example category
        path:
          type: string
          example: category-1/example-category
        favourite:
          type: boolean
          example: false
          description: Is the category marked as favourite by logged user. Always `false` for not logged.

    InlineUserDto:
      type: object
      description: "`null` if user has been removed"
      required:
        - id
        - name
        - points
        - level
        - favourite
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: user1
          description: "Username"
        title:
          type: string
          example: "Title"
          description: Title name based on points
        points:
          type: integer
          example: 200
        level:
          $ref: "#/components/schemas/UserLevelDto"
        favourite:
          type: boolean
          example: false
          description: Is the user marked as favourite by logged user. Always `false` for not logged.

    PaginationDto:
      type: object
      required:
        - itemsCount
        - perPage
        - currentPage
        - firstPage
        - lastPage
        - previousPage
        - nextPage
      properties:
        itemsCount:
          type: integer
          example: 35
          description: "Total number of items on list"
        perPage:
          type: integer
          example: 10
          description: "Number of items per one page"
        currentPage:
          type: integer
          example: 2
          description: "Current page number"
        firstPage:
          type: integer
          example: 1
          description: "Number of first page"
        lastPage:
          type: integer
          example: 4
          description: "Number of last page"
        previousPage:
          type: integer
          example: 1
          description: "Number of previous page. `null` means that current page is first"
        nextPage:
          type: integer
          example: 3
          description: "Number of next page. `null` means that current page is last"

  securitySchemes:
    q2aSession:
      type: apiKey
      in: cookie
      name: PHPSESSID
